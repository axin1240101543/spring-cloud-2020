spring:
  application:
    name: api-driver
server:
  port: 8080
eureka:
  client:
    service-url:
      defaultZone: http://root:1234@localhost:8761/eureka/
    registry-fetch-interval-seconds: 30 #默认30秒从server端拉取一次注册表（定时任务）com/netflix/discovery/DiscoveryClient.class:899
    healthcheck:
      enabled: true #开启健康检查，需要引入actuator
  instance:
    lease-renewal-interval-in-seconds: 30 #发送心跳给server的频率，每隔这个时间会主动心跳一次（定时任务）com/netflix/discovery/DiscoveryClient.class:905
    lease-expiration-duration-in-seconds: 90 #Server从收到client后，下一次收到心跳的间隔时间。超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    metadata-map:
      a: b #灰度发布
    prefer-ip-address: true
    virtual-host-name: api-driver #默认情况下，虚拟主机名=服务名称，虚拟主机名最好不要用"_"。

#日志
logging:
  level:
    root: info

#属性配置方式优先级高于Java代码，示例：https://www.jianshu.com/p/508f62fa0de5
#针对服务定ribbon策略：
#ribbon使用（依赖Eureka）
#service-sms: #serviceId
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机策略，默认轮训策略
#    NFLoadBalancerRuleClassName: com.darren.center.api.driver.ribbonconfig.MyRandomRule2 #自定义策略，默认轮训策略
#ribbon独立使用（脱离Eureka）
#service-sms: #serviceId
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机策略，默认轮训策略
#    eureka:
#      enable: false # 将Eureka关闭，则Ribbon无法从Eureka中获取服务端列表信息
#    listOfServers: localhost:8881,localhost:8882 # listOfServers可以设置服务端列表


#给所有服务定ribbon策略：
#ribbon使用（依赖Eureka）
#ribbon:
#  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机策略，默认轮训策略
#ribbon独立使用（脱离Eureka）
#ribbon:
#  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机策略，默认轮训策略
#  eureka:
#    enable: false # 将Eureka关闭，则Ribbon无法从Eureka中获取服务端列表信息
#  listOfServers: localhost:8881,localhost:8882 # listOfServers可以设置服务端列表


#ribbon开启饥饿模式   Spring Cloud默认是懒加载，指定名称的Ribbon Client第一次请求时，对应的上下文才会被加载，所以第一次访问慢。
ribbon:
  eager-load:
    enabled: true #饥饿模式 将在启动时加载对应的程序上下文，从而提高首次请求的访问速度。默认false：当服务调用时，采取拉取服务列表。
    clients:
      - SERVICE-SMS
