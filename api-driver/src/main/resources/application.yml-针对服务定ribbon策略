spring:
  application:
    name: api-driver
server:
  port: 8080
eureka:
  client:
    service-url:
      defaultZone: http://root:1234@localhost:8761/eureka/
    registry-fetch-interval-seconds: 30 #默认30秒从server端拉取一次注册表（定时任务）com/netflix/discovery/DiscoveryClient.class:899
    healthcheck:
      enabled: true #开启健康检查，需要引入actuator
  instance:
    lease-renewal-interval-in-seconds: 30 #发送心跳给server的频率，每隔这个时间会主动心跳一次（定时任务）com/netflix/discovery/DiscoveryClient.class:905
    lease-expiration-duration-in-seconds: 90 #Server从收到client后，下一次收到心跳的间隔时间。超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    metadata-map:
      a: b #灰度发布
    prefer-ip-address: true
    virtual-host-name: api-driver #默认情况下，虚拟主机名=服务名称，虚拟主机名最好不要用"_"。

#日志
logging:
  level:
    root: info

#属性配置方式优先级高于Java代码，示例：https://www.jianshu.com/p/508f62fa0de5
#针对服务定ribbon策略：
#ribbon使用（依赖Eureka）
service-sms: #serviceId
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机策略，默认轮训策略
    #NFLoadBalancerRuleClassName: com.darren.center.api.driver.ribbonconfig.MyRandomRule1 #自定义策略：选择端口以1或者3结尾的服务，默认轮训策略
    #NFLoadBalancerRuleClassName: com.darren.center.api.driver.ribbonconfig.MyRandomRule2 #自定义策略：按照流量分发（60%到A，40%到B），默认轮训策略