spring:
  application:
    name: api-passenger
  security:
    user:
      name: root
      password: 1234
server:
  port: 8081
eureka:
  client:
    service-url:
      defaultZone: http://root:1234@localhost:8761/eureka/
    registry-fetch-interval-seconds: 30 #默认30秒从server端拉取一次注册表（定时任务）com/netflix/discovery/DiscoveryClient.class:899
    healthcheck:
      enabled: true #开启健康检查，需要引入actuator
  instance:
    lease-renewal-interval-in-seconds: 30 #发送心跳给server的频率，每隔这个时间会主动心跳一次（定时任务）com/netflix/discovery/DiscoveryClient.class:905
    lease-expiration-duration-in-seconds: 90 #Server从收到client后，下一次收到心跳的间隔时间。超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    metadata-map:
      a: b #灰度发布
    prefer-ip-address: true

feign:
  client:
    config:
      default: #可以指定具体的微服务
        logger-level: full
  hystrix:
    enabled: true #feign自带Hystrix，但是默认没有打开，首先打开Hystrix
#上面有4种日志类型
#  none:不记录任何日志，默认值
#  basic:仅记录请求方法，url，响应状态码，执行时间。
#  headers：在basic基础上，记录header信息
#  full：记录请求和响应的header，body，元数据。

#上面的logger-level只对下面的 debug级别日志做出响应。
logging:
  level:
    com.darren.center.api.passenger.feign.ServiceForecast: debug
ribbon: #feign在调用其他微服务接口前，会去请求该微服务的相关信息(地址、端口等)，并做一些初始化操作，由于默认的懒加载特性，导致了在第一次调用时，出现超时的情况
  eager-load:
    enabled: true
    clients:
    - service-valuation #配置ribbon立即加载，此处需要注意的是，光配置立即加载是不生效的，还要配置客户端列表.
service-valuation:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #ribbon自定义策略